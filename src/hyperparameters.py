from skopt.space import Real, Integer, Categorical


HYPERPARAMETERS = {
    "knn": {
        "n_neighbors": Integer(1, 50),
        "weights": Categorical(["uniform", "distance"]),
        "algorithm": Categorical(["auto", "ball_tree", "kd_tree", "brute"]),
        "leaf_size": Integer(10, 100),
        "p": Integer(1, 2),
        "metric": Categorical(["euclidean", "manhattan", "minkowski"]),
    },
    "dt": {
        "criterion": Categorical(["gini", "entropy"]),
        "splitter": Categorical(["best", "random"]),
        "max_depth": Integer(1, 32),
        "min_samples_split": Integer(2, 20),
        "min_samples_leaf": Integer(1, 20),
        "max_leaf_nodes": Integer(2, 100),
        "min_impurity_decrease": Real(0.0, 1.0),
        "ccp_alpha": Real(0.0, 1.0),
    },
    "gnb": {
        "var_smoothing": Real(1e-9, 1e-1, prior="log-uniform"), 
    },
    "svm": {
        "C": Real(1e-6, 1e6, prior="log-uniform"),
        "kernel": Categorical(["linear", "poly", "rbf", "sigmoid"]),
        "degree": Integer(1, 5),
        "gamma": Real(1e-6, 1e1, prior="log-uniform"),
        "coef0": Real(-1, 1),
        "shrinking": Categorical([True, False]),
        "tol": Real(1e-6, 1e-2, prior="log-uniform"),
        "class_weight": Categorical([None, "balanced"]),
    },
    "rf": {
        "n_estimators": Integer(10, 1000),
        "max_depth": Integer(1, 50),
        "min_samples_split": Integer(2, 20),
        "min_samples_leaf": Integer(1, 20),
        "bootstrap": Categorical([True, False]),
        "criterion": Categorical(["gini", "entropy"]),
        "max_leaf_nodes": Integer(2, 100),
        "min_impurity_decrease": Real(0.0, 1.0),
        "ccp_alpha": Real(0.0, 1.0),
    },
    "xgb": {
        "max_depth": Integer(1, 20),
        "learning_rate": Real(0.01, 1.0, prior="log-uniform"),
        "n_estimators": Integer(100, 1000),
        "min_child_weight": Real(0.1, 10.0, prior="log-uniform"),
        "subsample": Real(0.5, 1.0),
        "colsample_bytree": Real(0.5, 1.0),
        "gamma": Real(0.0, 5.0),
        # "n_neighbors": Integer(1, 50),
        # "reg_alpha": Real(0.0, 10.0, prior="log-uniform"),
        # "reg_lambda": Real(0.0, 10.0, prior="log-uniform"),
        # "booster": Categorical(["gbtree", "gblinear", "dart"]),
        # "tree_method": Categorical(["auto", "exact", "approx", "hist"]),
        # "scale_pos_weight": Real(0.1, 10.0, prior="log-uniform"),
    },
    "ada": {
        "n_estimators": Integer(50, 500),
        "learning_rate": Real(0.01, 1.0, prior="log-uniform"),
        "algorithm": Categorical(["SAMME", "SAMME.R"]),
        "base_estimator__max_depth": Integer(1, 10),
        "base_estimator__min_samples_split": Integer(2, 20),
        "base_estimator__min_samples_leaf": Integer(1, 20),
    },
    "cat": {
        "learning_rate": Real(0.01, 0.3, prior="log-uniform"),
        "depth": Integer(4, 10),
        "l2_leaf_reg": Real(1e-3, 10, prior="log-uniform"),
        "iterations": Integer(100, 1000),
        "od_wait": Integer(10, 50),
        "bagging_temperature": Real(0.0, 1.0),
        "random_strength": Real(1e-9, 10, prior="log-uniform"),
        "border_count": Integer(32, 255),
        "feature_border_type": Categorical(["Median", "UniformAndQuantiles", "GreedyLogSum", "MaxLogSum", "MinEntropy"]),
        "leaf_estimation_method": Categorical(["Newton", "Gradient"]),
        "grow_policy": Categorical(["SymmetricTree", "Depthwise", "Lossguide"]),
        "min_data_in_leaf": Integer(1, 100),
        "max_leaves": Integer(31, 1023),
        "rsm": Real(0.1, 1.0),
        "boosting_type": Categorical(["Ordered", "Plain"]),
        "bootstrap_type": Categorical(["Bayesian", "Bernoulli", "MVS"]),
        "subsample": Real(0.1, 1.0),
        "colsample_bylevel": Real(0.1, 1.0),
        "max_bin": Integer(200, 500),
        "min_child_samples": Integer(1, 100),
        "gpu_cat_features_storage": Categorical(["CpuPinnedMemory", "GpuRam"]),
    },
}
