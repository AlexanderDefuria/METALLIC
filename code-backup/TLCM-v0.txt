import pandas as pd
import numpy as np
from math import sqrt

def calculate_tlcm(data):
    # Define the Euclidean distance function
    def euclidean_distance(row1, row2):
        return sqrt(sum([(r1 - r2) ** 2 for r1, r2 in zip(row1, row2)]))

    # Define the function to get nearest neighbors
    def get_neighbors(train, test_row, num_neighbors):
        distances = [(train_row, euclidean_distance(test_row, train_row[:-1]))
                     for train_row in train]
        distances.sort(key=lambda tup: tup[1])
        return [distances[i][0] for i in range(num_neighbors)]

    # Convert the DataFrame to a list of lists and get class values
    dataset = data.values.tolist()
    class_values = list(set(row[-1] for row in dataset))
    minority_class = min(class_values, key=lambda cls: sum(row[-1] == cls for row in dataset))

    # Calculate TLCM
    tl_count = 0  # Tomek links count
    for row in dataset:
        if row[-1] == minority_class:
            neighbors = get_neighbors(dataset, row, 5)  # Get the nearest neighbor
            nearest_neighbor = neighbors[1]  # Exclude the instance itself
            # Check if the nearest neighbor is a Tomek link
            if nearest_neighbor[-1] != row[-1]:
                # Check if the instance is the nearest neighbor's nearest neighbor
                reciprocal = get_neighbors(dataset, nearest_neighbor, 2)[1]
                if reciprocal == row:
                    tl_count += 1

    tlcm = float(tl_count) / sum(row[-1] == minority_class for row in dataset)  # TLCM calculation
    return tlcm